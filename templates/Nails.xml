<templateSet group="Nails">
  <template name="model" value="&lt;?php&#10;&#10;/**&#10; * This model handles interactions with the app's &quot;$TABLE$&quot; table.&#10; *&#10; * @package  App&#10; * @author   Shed Collective &lt;hello@shedcollective.org&gt;&#10; * @category model&#10; */&#10;&#10;namespace $NAMESPACE$;&#10;&#10;use Nails\Common\Model\Base;&#10;&#10;class $CLASS$ extends Base&#10;{&#10;    /**&#10;     * $CLASS$ constructor.&#10;     */&#10;    public function __construct()&#10;    {&#10;        parent::__construct();&#10;        $this-&gt;table = APP_DB_PREFIX . '$TABLE$';&#10;    }&#10;}&#10;" description="Create a new Nails app model." toReformat="false" toShortenFQNames="true">
    <variable name="NAMESPACE" expression="" defaultValue="&quot;App\\Model&quot;" alwaysStopAt="false" />
    <variable name="CLASS" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE" expression="" defaultValue="snakeCase(CLASS)" alwaysStopAt="false" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="model-nails" value="&lt;?php&#10;&#10;/**&#10; * This model handles interactions with the module's &quot;$TABLE$&quot; table.&#10; *&#10; * @package     Nails&#10; * @subpackage  module-$MODULE$&#10; * @category    model&#10; * @author      Nails Dev Team &lt;hello@nailsapp.co.uk&gt;&#10; */&#10;&#10;namespace Nails\$NAMESPACE$\Model;&#10;&#10;use Nails\Common\Model\Base;&#10;&#10;class $CLASS$ extends Base&#10;{&#10;    /**&#10;     * $CLASS$ constructor.&#10;     */&#10;    public function __construct()&#10;    {&#10;        parent::__construct();&#10;        $this-&gt;table = NAILS_DB_PREFIX . '$MODULE_PREFIX$_$TABLE$';&#10;    }&#10;}" description="Create a new Nails model." toReformat="false" toShortenFQNames="true">
    <variable name="MODULE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAMESPACE" expression="" defaultValue="capitalize(camelCase(MODULE))" alwaysStopAt="false" />
    <variable name="CLASS" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false" />
    <variable name="TABLE" expression="" defaultValue="snakeCase(CLASS)" alwaysStopAt="false" />
    <variable name="MODULE_PREFIX" expression="" defaultValue="snakeCase(MODULE)" alwaysStopAt="false" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="controller-cron" value="&lt;?php&#10;&#10;namespace Nails\Cron\App;&#10;&#10;use Nails\Cron\Controller\Base;&#10;&#10;class $CLASS$ extends Base&#10;{&#10;    public function index()&#10;    {&#10;        $END$&#10;    }&#10;}&#10;" description="Generates a blank cron controller." toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="capitalize(fileNameWithoutExtension())" alwaysStopAt="false" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="expandable-single" value="$this-&gt;addExpandableField(&#10;    array(&#10;        'trigger'     =&gt; '$TRIGGER$',&#10;        'type'        =&gt; self::EXPANDABLE_TYPE_SINGLE,&#10;        'property'    =&gt; '$TRIGGER$',&#10;        'model'       =&gt; '$MODEL$',&#10;        'provider'    =&gt; '$PROVIDER$',&#10;        'id_column'   =&gt; '$TRIGGER$_id'&#10;    )&#10;);" toReformat="false" toShortenFQNames="true">
    <variable name="TRIGGER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL" expression="" defaultValue="capitalize(camelCase(TRIGGER))" alwaysStopAt="false" />
    <variable name="PROVIDER" expression="" defaultValue="&quot;app&quot;" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="expandable-many" value="$this-&gt;addExpandableField(&#10;    array(&#10;        'trigger'     =&gt; '$TRIGGER$',&#10;        'type'        =&gt; self::EXPANDABLE_TYPE_MANY,&#10;        'property'    =&gt; '$TRIGGER$',&#10;        'model'       =&gt; '$MODEL$',&#10;        'provider'    =&gt; '$PROVIDER$',&#10;        'id_column'   =&gt; '$CLASS$_id',&#10;    )&#10;);" toReformat="false" toShortenFQNames="true">
    <variable name="TRIGGER" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MODEL" expression="" defaultValue="capitalize(camelCase(TRIGGER))" alwaysStopAt="false" />
    <variable name="CLASS" expression="" defaultValue="lowercaseAndDash(fileNameWithoutExtension())" alwaysStopAt="false" />
    <variable name="PROVIDER" expression="" defaultValue="&quot;app&quot;" alwaysStopAt="false" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
  <template name="controller-admin" value="&lt;?php&#10;&#10;namespace App\Admin\App;&#10;&#10;use Nails\Admin\Controller\DefaultController;&#10;&#10;class $CLASS$ extends DefaultController&#10;{&#10;    const CONFIG_MODEL_NAME     = '$CLASS$';&#10;    const CONFIG_MODEL_PROVIDER = 'app';&#10;    const CONFIG_TITLE_SINGLE   = '$CLASS$';&#10;    const CONFIG_TITLE_PLURAL   = '$CLASS$s';&#10;    const CONFIG_SIDEBAR_GROUP  = '$CLASS$s';&#10;    const CONFIG_PERMISSION     = 'app:$CLASS_LOWER$';&#10;    const CONFIG_BASE_URL       = 'app/$CLASS_LOWER$';&#10;    const CONFIG_SORT_OPTIONS   = '{&quot;label&quot;:&quot;Label&quot;, &quot;modified&quot;:&quot;modified&quot;}';&#10;}&#10;" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="capitalize(camelCase(fileNameWithoutExtension()))" alwaysStopAt="false" />
    <variable name="CLASS_LOWER" expression="" defaultValue="lowercaseAndDash(snakeCase(CLASS))" alwaysStopAt="false" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="controller-api" value="&lt;?php&#10;&#10;namespace Nails\Api\App;&#10;&#10;use Nails\Factory;&#10;&#10;class $CLASS$ extends \Nails\Api\Controller\Base&#10;{&#10;    const MAX_ITEMS_PER_REQUEST = 100;&#10;&#10;    // --------------------------------------------------------------------------&#10;&#10;    public function getId()&#10;    {&#10;        $sIds = '';&#10;&#10;        if (!empty($this-&gt;input-&gt;get('id'))) {&#10;            $sIds = $this-&gt;input-&gt;get('id');&#10;        }&#10;&#10;        if (!empty($this-&gt;input-&gt;get('ids'))) {&#10;            $sIds = $this-&gt;input-&gt;get('ids');&#10;        }&#10;&#10;        $aIds = explode(',', $sIds);&#10;        $aIds = array_filter($aIds);&#10;        $aIds = array_unique($aIds);&#10;&#10;        if (count($aIds) &gt; 100) {&#10;            return array(&#10;                'status' =&gt; 400,&#10;                'error'  =&gt; 'You can request a maximum of ' . self::MAX_ITEMS_PER_REQUEST . ' items per request'&#10;            );&#10;        }&#10;&#10;        // --------------------------------------------------------------------------&#10;&#10;        $oItemModel = Factory::model('Interest', 'app');&#10;        $aResults   = $oItemModel-&gt;getByIds($aIds);&#10;        $aOut       = array();&#10;&#10;        foreach ($aResults as $oItem) {&#10;            $aOut[] = $this-&gt;formatObject($oItem);&#10;        }&#10;&#10;        if ($this-&gt;input-&gt;get('id')) {&#10;            return array('data' =&gt; $aOut[0]);&#10;        } else {&#10;            return array('data' =&gt; $aOut);&#10;        }&#10;    }&#10;&#10;    // --------------------------------------------------------------------------&#10;&#10;    public function getSearch()&#10;    {&#10;        $sKeywords  = $this-&gt;input-&gt;get('keywords');&#10;        $oItemModel = Factory::model('Interest', 'app');&#10;&#10;        if (strlen($sKeywords) &gt;= 0) {&#10;            $oResult = $oItemModel-&gt;search($sKeywords);&#10;            $aOut    = array();&#10;&#10;            foreach ($oResult-&gt;data as $oItem) {&#10;                $aOut[] = $this-&gt;formatObject($oItem);&#10;            }&#10;&#10;            return array(&#10;                'data' =&gt; $aOut&#10;            );&#10;        } else {&#10;            return array(&#10;                'status' =&gt; 400,&#10;                'error' =&gt; 'Search term must be 0 characters or longer.'&#10;            );&#10;        }&#10;    }&#10;&#10;    // --------------------------------------------------------------------------&#10;&#10;    protected function formatObject($oObj)&#10;    {&#10;        return array(&#10;            'id'    =&gt; $oObj-&gt;id,&#10;            'label' =&gt; $oObj-&gt;label&#10;        );&#10;    }&#10;}&#10;" toReformat="false" toShortenFQNames="true">
    <variable name="CLASS" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
</templateSet>